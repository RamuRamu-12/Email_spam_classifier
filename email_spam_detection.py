# -*- coding: utf-8 -*-
"""Email_Spam_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12LcWI-zmq7Ev09c_bMEZNGFVhnlyY4H0
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings("ignore")

data=pd.read_csv("/content/drive/MyDrive/Oasis Infobyte/Task4/spam.csv",encoding = "ISO-8859-1")

data

data2 = data.drop(["Unnamed: 2","Unnamed: 3","Unnamed: 4"], axis=1)

data2.head()

data2.rename(columns = {"v1" : "Spam or Ham", "v2":"Message"},inplace = True)
data2.head()

data2.describe()

data2.info()

data2.shape

data2.isnull().sum()

data2["Spam or Ham"].unique()

#Converting the categorical values into numerical values
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
data2['Spam or Ham'] = encoder.fit_transform(data2['Spam or Ham'])

#Finding duplicates
data2.duplicated().sum()

data2 = data2.drop_duplicates(keep = 'first')
data2

data2.duplicated().sum()

#Splitting the data,,
x = data2.drop("Spam or Ham",axis=1)
y = data2["Spam or Ham"]

x

y







ser=data2["Message"]

type(ser)

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer()
X_train_count = cv.fit_transform(ser)
X_train_count.toarray()

#Splitting the data into training and testing data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train,y_test = train_test_split(X_train_count,y,test_size = 0.20, random_state = 0)

#Fitting multinomial naive bayes
from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB()
model.fit(X_train,y_train)

from sklearn.metrics import confusion_matrix , recall_score , precision_score
from sklearn.metrics import accuracy_score

mail_ham = ['dtlllllllllllllllllsssssssssssssssrd']
mail_ham_count = cv.transform(mail_ham)
y_pred = model.predict(mail_ham_count)
y_pred

#finding accuracy of the training dataset
model.score(X_train,y_train)

#finding accuracy of the test dataset

model.score(X_test,y_test)

#Building Decision Tree Classifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import classification_report
from sklearn.tree import plot_tree
DT_model = DecisionTreeClassifier()

param_dist = {"max_depth": [3, None],
              "criterion": ["gini", "entropy"]}

cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)

RCV = RandomizedSearchCV(DT_model, param_dist, n_iter=50, scoring='roc_auc', n_jobs=-1, cv=5, random_state=1)

DT = RCV.fit(X_train,y_train).best_estimator_
pred = DT.predict(X_test)

print(classification_report(y_test,pred))

print('\n\033[1mInterpreting the output of Decision Tree:\n\033[0m')
plot_tree(DT)

plt.show()

from sklearn.ensemble import RandomForestClassifier


RF_model = RandomForestClassifier()

param_dist={
            'max_depth': [10, 20, 50, 100, None],
            'max_features': ['auto', 'sqrt'],
            'n_estimators': [50, 100]}

cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)

RCV = RandomizedSearchCV(RF_model, param_dist, n_iter=50, n_jobs=-1, cv=5, random_state=1)

RF = RCV.fit(X_train,y_train).best_estimator_
pred = RF.predict(X_test)

print(classification_report(y_test,pred))

import pickle

filename = 'Email_spam_model.sav'
pickle.dump(DT_model, open(filename, 'wb'))

